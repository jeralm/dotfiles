#!/bin/sh

cache_directory="$HOME/.cache/bitwarden"
session_file="session"

ensure_unlocked () {

    # create the cache directory if it doesn't exist
    if [ ! -d "$cache_directory" ]; then
        mkdir -p $cache_directory
    fi

    # create the session file if it doesn't exist
    if [ ! -f "$cache_directory/$session_file" ]; then
        touch "$cache_directory/$session_file"
    fi

    # export the session token to the environment
    export BW_SESSION="$(cat $cache_directory/$session_file)"

    # if the vault is locked
    if ! bw unlock --check > /dev/null 2>&1; then

        # get the master password from the user
        # print to stderr and read from /dev/tty because stdin and stdout are consumed by git
        echo -n "Bitwarden Master Password:" >&2
        read -s password < /dev/tty
        session="$(bw unlock $password --raw)"
        export BW_SESSION=$session
        echo $session > "$cache_directory/$session_file"
    fi
}

## begin script

# exit if the user is not logged in
if ! bw login --check &> /dev/null; then
    echo "You are not logged in to Bitwarden. Please login manually before unlocking the vault." >&2
    exit 1
fi

ensure_unlocked

case "$1" in
    get)

        # get the input from git through the standard input
        read git_protocol_input
        read git_host_input
        read line

        # extract the protocol and host from the input strings
        git_protocol="${git_protocol_input#"protocol="}"
        git_host="${git_host_input#"host="}"

        # format a query for bitwarden
        bw_query="$git_protocol://$git_host"

        # get the full json item from bitwarden
        item=$(bw get item $bw_query)

        # prepare the jq scripts to parse the json item
        jq_script_username='.login.username'
        jq_script_password='.login.password'

        # handle special cases
        case "$bw_query" in
            # github 2fa forces the use of an access token instead of a regular password
            "https://github.com" )
                jq_script_password='.fields | .[] | select(.name == "access_token") | .value'
                ;;
        esac

        # retrieve the username & password from the json item
        username=$(echo $item | jq --raw-output "$jq_script_username")
        password=$(echo $item | jq --raw-output "$jq_script_password")

        # send a response to git
        echo "$git_protocol_input"
        echo "$git_host_input"
        echo "username=$username"
        echo "password=$password"
        ;;
    store)
        # do nothing
        ;;
    erase)
        # do nothing
        ;;
    *)
        # do nothing
        ;;
esac